{"remainingRequest":"C:\\Users\\HM\\Desktop\\体育管理后台前端\\SportsManagementBackground\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\HM\\Desktop\\体育管理后台前端\\SportsManagementBackground\\src\\libs\\axios.js","dependencies":[{"path":"C:\\Users\\HM\\Desktop\\体育管理后台前端\\SportsManagementBackground\\src\\libs\\axios.js","mtime":1559054324093},{"path":"C:\\Users\\HM\\Desktop\\体育管理后台前端\\SportsManagementBackground\\.babelrc","mtime":1556246239000},{"path":"C:\\Users\\HM\\Desktop\\体育管理后台前端\\SportsManagementBackground\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\HM\\Desktop\\体育管理后台前端\\SportsManagementBackground\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _classCallCheck from \"C:\\\\Users\\\\HM\\\\Desktop\\\\\\u4F53\\u80B2\\u7BA1\\u7406\\u540E\\u53F0\\u524D\\u7AEF\\\\SportsManagementBackground\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\HM\\\\Desktop\\\\\\u4F53\\u80B2\\u7BA1\\u7406\\u540E\\u53F0\\u524D\\u7AEF\\\\SportsManagementBackground\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport axios from 'axios';\nimport store from '@/store'; // import { Spin } from 'iview'\n\nvar addErrorLog = function addErrorLog(errorInfo) {\n  var statusText = errorInfo.statusText,\n      status = errorInfo.status,\n      responseURL = errorInfo.request.responseURL;\n  var info = {\n    ApiType: 'ajax',\n    ErrorType: status,\n    ErrorMsg: statusText,\n    Url: responseURL\n  };\n  if (!responseURL.includes('save_error_logger')) store.dispatch('addErrorLog', info);\n};\n\nvar HttpRequest =\n/*#__PURE__*/\nfunction () {\n  function HttpRequest() {\n    var baseUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : baseURL;\n\n    _classCallCheck(this, HttpRequest);\n\n    this.baseUrl = baseUrl;\n    this.queue = {};\n  }\n\n  _createClass(HttpRequest, [{\n    key: \"getInsideConfig\",\n    value: function getInsideConfig() {\n      var config = {\n        baseURL: this.baseUrl,\n        headers: {//\n        }\n      };\n      return config;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy(url) {\n      delete this.queue[url];\n\n      if (!Object.keys(this.queue).length) {// Spin.hide()\n      }\n    }\n  }, {\n    key: \"interceptors\",\n    value: function interceptors(instance, url) {\n      var _this = this;\n\n      // 请求拦截\n      instance.interceptors.request.use(function (config) {\n        // 添加全局的loading...\n        if (!Object.keys(_this.queue).length) {// Spin.show() // 不建议开启，因为界面不友好\n        }\n\n        _this.queue[url] = true;\n        return config;\n      }, function (error) {\n        return Promise.reject(error);\n      }); // 响应拦截\n\n      instance.interceptors.response.use(function (res) {\n        console.log(res.data);\n\n        if (res.data.Status == 1) {\n          _this.destroy(url);\n\n          var data = res.data,\n              status = res.status;\n          return {\n            data: data,\n            status: status\n          };\n        } else {\n          console.log('返回错误：' + res.data.Msg);\n          return Promise.reject(res.data.Msg);\n        }\n      }, function (error) {\n        _this.destroy(url);\n\n        var errorInfo = error.response;\n\n        if (!errorInfo) {\n          var _JSON$parse = JSON.parse(JSON.stringify(error)),\n              _JSON$parse$request = _JSON$parse.request,\n              statusText = _JSON$parse$request.statusText,\n              status = _JSON$parse$request.status,\n              config = _JSON$parse.config;\n\n          errorInfo = {\n            statusText: statusText,\n            status: status,\n            request: {\n              responseURL: config.url\n            }\n          };\n        }\n\n        addErrorLog(errorInfo);\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"request\",\n    value: function request(options) {\n      var instance = axios.create();\n      options = Object.assign(this.getInsideConfig(), options);\n      this.interceptors(instance, options.url);\n      return instance(options);\n    }\n  }]);\n\n  return HttpRequest;\n}();\n\nexport default HttpRequest;",{"version":3,"sources":["C:\\Users\\HM\\Desktop\\体育管理后台前端\\SportsManagementBackground\\src\\libs\\axios.js"],"names":["axios","store","addErrorLog","errorInfo","statusText","status","responseURL","request","info","ApiType","ErrorType","ErrorMsg","Url","includes","dispatch","HttpRequest","baseUrl","baseURL","queue","config","headers","url","Object","keys","length","instance","interceptors","use","error","Promise","reject","response","res","console","log","data","Status","destroy","Msg","JSON","parse","stringify","options","create","assign","getInsideConfig"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport store from '@/store'\n// import { Spin } from 'iview'\nconst addErrorLog = errorInfo => {\n  const { statusText, status, request: { responseURL } } = errorInfo\n  let info = {\n    ApiType: 'ajax',\n    ErrorType: status,\n    ErrorMsg: statusText,\n    Url: responseURL\n  }\n  if (!responseURL.includes('save_error_logger')) store.dispatch('addErrorLog', info)\n}\n\nclass HttpRequest {\n  constructor (baseUrl = baseURL) {\n    this.baseUrl = baseUrl\n    this.queue = {}\n  }\n  getInsideConfig () {\n    const config = {\n      baseURL: this.baseUrl,\n      headers: {\n        //\n      }\n    }\n    return config\n  }\n  destroy (url) {\n    delete this.queue[url]\n    if (!Object.keys(this.queue).length) {\n      // Spin.hide()\n    }\n  }\n  interceptors (instance, url) {\n    // 请求拦截\n    instance.interceptors.request.use(config => {\n      // 添加全局的loading...\n      if (!Object.keys(this.queue).length) {\n        // Spin.show() // 不建议开启，因为界面不友好\n      }\n      this.queue[url] = true\n      return config\n    }, error => {\n      return Promise.reject(error)\n    })\n    // 响应拦截\n    instance.interceptors.response.use(res => {\n      console.log(res.data);\n      if (res.data.Status == 1) {\n        this.destroy(url)\n        const { data, status } = res\n        return { data, status }\n      }\n      else{\n        console.log('返回错误：' + res.data.Msg);\n        return Promise.reject(res.data.Msg)\n      }   \n    }, error => {\n      this.destroy(url)\n      let errorInfo = error.response\n      if (!errorInfo) {\n        const { request: { statusText, status }, config } = JSON.parse(JSON.stringify(error))\n        errorInfo = {\n          statusText,\n          status,\n          request: { responseURL: config.url }\n        }\n      }\n      addErrorLog(errorInfo)\n      return Promise.reject(error)\n    })\n  }\n  request (options) {\n    const instance = axios.create()\n    options = Object.assign(this.getInsideConfig(), options)\n    this.interceptors(instance, options.url)\n    return instance(options)\n  }\n}\nexport default HttpRequest\n"]}]}